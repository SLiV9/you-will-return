//
// Part of dodgeball-wasm-4
// Copyright (c) 2022 Sander in 't Veld
// License: MIT
//

use crate::wasm4::*;

pub struct Animation
{
	facing: Facing,
	tag: AnimationTag,
	frame: u8,
	ticks: u8,
}

enum Facing
{
	Left,
	Right,
}

enum AnimationTag
{
	IdleRight,
	IdleLeft,
	RunRight,
	RunLeft,
	RunUp,
	Death,
	Gone,
}

impl Animation
{
	pub fn new() -> Self
	{
		Self {
			facing: Facing::Right,
			tag: AnimationTag::IdleRight,
			frame: 0,
			ticks: 0,
		}
	}

	pub fn idle(&mut self)
	{
		match self.tag
		{
			AnimationTag::IdleLeft | AnimationTag::IdleRight =>
			{}
			_ =>
			{
				self.tag = match self.facing
				{
					Facing::Left => AnimationTag::IdleLeft,
					Facing::Right => AnimationTag::IdleRight,
				};
				self.frame = 0;
			}
		}
	}

	pub fn run_left(&mut self)
	{
		match self.tag
		{
			AnimationTag::RunLeft =>
			{}
			AnimationTag::RunRight | AnimationTag::RunUp =>
			{
				self.facing = Facing::Left;
				self.tag = AnimationTag::RunLeft;
			}
			_ =>
			{
				self.facing = Facing::Left;
				self.tag = AnimationTag::RunLeft;
				self.frame = 0;
			}
		}
	}

	pub fn run_right(&mut self)
	{
		match self.tag
		{
			AnimationTag::RunRight =>
			{}
			AnimationTag::RunLeft | AnimationTag::RunUp =>
			{
				self.facing = Facing::Right;
				self.tag = AnimationTag::RunRight;
			}
			_ =>
			{
				self.facing = Facing::Right;
				self.tag = AnimationTag::RunRight;
				self.frame = 0;
			}
		}
	}

	pub fn run_up(&mut self)
	{
		match self.tag
		{
			AnimationTag::RunUp =>
			{}
			AnimationTag::RunLeft | AnimationTag::RunRight =>
			{
				self.tag = AnimationTag::RunUp;
			}
			_ =>
			{
				self.tag = AnimationTag::RunUp;
				self.frame = 0;
			}
		}
	}

	pub fn run_down(&mut self)
	{
		match self.facing
		{
			Facing::Left =>
			{
				self.tag = AnimationTag::RunLeft;
			}
			Facing::Right =>
			{
				self.tag = AnimationTag::RunRight;
			}
		}

		match self.tag
		{
			AnimationTag::RunRight
			| AnimationTag::RunLeft
			| AnimationTag::RunUp =>
			{}
			_ =>
			{
				self.frame = 0;
			}
		}
	}

	pub fn die(&mut self)
	{
		self.tag = AnimationTag::Death;
		self.frame = 0;
	}

	pub fn tick(&mut self)
	{
		self.ticks += 1;

		let frame_length_in_ticks = 15;
		if self.ticks >= frame_length_in_ticks
		{
			self.ticks = 0;
			self.next_frame();
		}
	}

	fn next_frame(&mut self)
	{
		self.frame += 1;
		match self.tag
		{
			AnimationTag::Death =>
			{
				if self.frame >= 6
				{
					self.tag = AnimationTag::Gone;
				}
			}
			_ =>
			{
				let animation_len = 2;
				if self.frame >= animation_len
				{
					self.frame = 0;
				}
			}
		}
	}

	pub fn draw(&self, x: i32, y: i32)
	{
		let start = match self.tag
		{
			AnimationTag::IdleRight => 0,
			AnimationTag::IdleLeft => 2,
			AnimationTag::RunRight => 4,
			AnimationTag::RunLeft => 6,
			AnimationTag::RunUp => 8,
			AnimationTag::Death => 10,
			AnimationTag::Gone => return,
		};
		let offset: usize = start + (self.frame as usize);
		let frame = &LITTLE_GUY_FRAMES[offset];

		unsafe {
			*DRAW_COLORS = 0x4320;
		}
		blit(
			frame,
			x - (LITTLE_GUY_WIDTH as i32) / 2,
			y - (LITTLE_GUY_HEIGHT as i32) + 2,
			LITTLE_GUY_WIDTH,
			LITTLE_GUY_HEIGHT,
			BLIT_2BPP,
		);
	}
}

const LITTLE_GUY_WIDTH: u32 = 16;
const LITTLE_GUY_HEIGHT: u32 = 16;
const LITTLE_GUY_FRAMES: [[u8; 64]; 16] = [
	LITTLE_GUY1,
	LITTLE_GUY2,
	LITTLE_GUY3,
	LITTLE_GUY4,
	LITTLE_GUY5,
	LITTLE_GUY6,
	LITTLE_GUY7,
	LITTLE_GUY8,
	LITTLE_GUY9,
	LITTLE_GUY10,
	LITTLE_GUY11,
	LITTLE_GUY12,
	LITTLE_GUY13,
	LITTLE_GUY14,
	LITTLE_GUY15,
	LITTLE_GUY16,
];

// little_guy1
const LITTLE_GUY1: [u8; 64] = [
	0x00, 0x15, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x69, 0x69, 0x00, 0x00, 0x6d, 0x6d, 0x00,
	0x00, 0x6d, 0x6d, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x15, 0x54, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04, 0x10, 0x00,
	0x00, 0x37, 0xdc, 0x00, 0x03, 0xf7, 0xdf, 0xc0, 0x03, 0xff, 0xff, 0xc0,
	0x00, 0x3f, 0xfc, 0x00,
];

// little_guy2
const LITTLE_GUY2: [u8; 64] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x69, 0x69, 0x00,
	0x00, 0x6d, 0x6d, 0x00, 0x00, 0x6d, 0x6d, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x15, 0x54, 0x00, 0x00, 0x04, 0x10, 0x00,
	0x00, 0x37, 0xdc, 0x00, 0x03, 0xf7, 0xdf, 0xc0, 0x03, 0xff, 0xff, 0xc0,
	0x00, 0x3f, 0xfc, 0x00,
];

// little_guy3
const LITTLE_GUY3: [u8; 64] = [
	0x00, 0x15, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x69, 0x69, 0x00, 0x00, 0x79, 0x79, 0x00,
	0x00, 0x79, 0x79, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x15, 0x54, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04, 0x10, 0x00,
	0x00, 0x37, 0xdc, 0x00, 0x03, 0xf7, 0xdf, 0xc0, 0x03, 0xff, 0xff, 0xc0,
	0x00, 0x3f, 0xfc, 0x00,
];

// little_guy4
const LITTLE_GUY4: [u8; 64] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x69, 0x69, 0x00,
	0x00, 0x79, 0x79, 0x00, 0x00, 0x79, 0x79, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x15, 0x54, 0x00, 0x00, 0x04, 0x10, 0x00,
	0x00, 0x37, 0xdc, 0x00, 0x03, 0xf7, 0xdf, 0xc0, 0x03, 0xff, 0xff, 0xc0,
	0x00, 0x3f, 0xfc, 0x00,
];

// little_guy5
const LITTLE_GUY5: [u8; 64] = [
	0x00, 0x15, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x69, 0x69, 0x00, 0x00, 0x6d, 0x6d, 0x00,
	0x00, 0x6d, 0x6d, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x15, 0x54, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x3f, 0xdc, 0x00, 0x03, 0xff, 0xdf, 0xc0, 0x03, 0xff, 0xff, 0xc0,
	0x00, 0x3f, 0xfc, 0x00,
];

// little_guy6
const LITTLE_GUY6: [u8; 64] = [
	0x00, 0x15, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x69, 0x69, 0x00, 0x00, 0x6d, 0x6d, 0x00,
	0x00, 0x6d, 0x6d, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x15, 0x54, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x37, 0xfc, 0x00, 0x03, 0xf7, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xc0,
	0x00, 0x3f, 0xfc, 0x00,
];

// little_guy7
const LITTLE_GUY7: [u8; 64] = [
	0x00, 0x15, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x69, 0x69, 0x00, 0x00, 0x79, 0x79, 0x00,
	0x00, 0x79, 0x79, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x15, 0x54, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x37, 0xfc, 0x00, 0x03, 0xf7, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xc0,
	0x00, 0x3f, 0xfc, 0x00,
];

// little_guy8
const LITTLE_GUY8: [u8; 64] = [
	0x00, 0x15, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x69, 0x69, 0x00, 0x00, 0x79, 0x79, 0x00,
	0x00, 0x79, 0x79, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x15, 0x54, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x3f, 0xdc, 0x00, 0x03, 0xff, 0xdf, 0xc0, 0x03, 0xff, 0xff, 0xc0,
	0x00, 0x3f, 0xfc, 0x00,
];

// little_guy9
const LITTLE_GUY9: [u8; 64] = [
	0x00, 0x15, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x15, 0x54, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00,
	0x00, 0x3f, 0xdc, 0x00, 0x03, 0xff, 0xdf, 0xc0, 0x03, 0xff, 0xff, 0xc0,
	0x00, 0x3f, 0xfc, 0x00,
];

// little_guy10
const LITTLE_GUY10: [u8; 64] = [
	0x00, 0x15, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x15, 0x54, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00,
	0x00, 0x37, 0xfc, 0x00, 0x03, 0xf7, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xc0,
	0x00, 0x3f, 0xfc, 0x00,
];

// little_guy11
const LITTLE_GUY11: [u8; 64] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x54, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x69, 0x69, 0x00, 0x00, 0x6d, 0x6d, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x15, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x3f, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xc0,
	0x00, 0x3f, 0xfc, 0x00,
];

// little_guy12
const LITTLE_GUY12: [u8; 64] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x55, 0x55, 0x00,
	0x00, 0x15, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0xff, 0xff, 0x00,
	0x00, 0x0f, 0xf0, 0x00,
];

// little_guy13
const LITTLE_GUY13: [u8; 64] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x15, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x15, 0x54, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00,
	0x00, 0x00, 0x00, 0x00,
];

// little_guy14
const LITTLE_GUY14: [u8; 64] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
];

// little_guy15
const LITTLE_GUY15: [u8; 64] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
];

// little_guy16
const LITTLE_GUY16: [u8; 64] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
];
