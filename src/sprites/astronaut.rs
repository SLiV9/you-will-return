//
// Part of you-will-return
// Copyright (c) 2022 Sander in 't Veld
// License: MIT
//

use crate::wasm4::*;

pub struct Animation
{
	facing: Facing,
	tag: AnimationTag,
	frame: u8,
	ticks: u8,
	hang_height: u8,
}

enum Facing
{
	Left,
	Right,
}

enum AnimationTag
{
	IdleRight,
	IdleLeft,
	RunRight,
	RunLeft,
	RunDown,
	RunUp,
	Grabbed,
	Hanging,
	Collapsed,
	Scanning,
	Gone,
}

const FRAME_LENGTH_IN_TICKS: u8 = 10;

impl Animation
{
	pub fn new() -> Self
	{
		Self {
			facing: Facing::Right,
			tag: AnimationTag::IdleRight,
			frame: 0,
			ticks: 0,
			hang_height: 0,
		}
	}

	pub fn idle(&mut self)
	{
		match self.tag
		{
			AnimationTag::IdleLeft | AnimationTag::IdleRight =>
			{}
			_ =>
			{
				self.tag = match self.facing
				{
					Facing::Left => AnimationTag::IdleLeft,
					Facing::Right => AnimationTag::IdleRight,
				};
				self.frame = 0;
			}
		}
	}

	pub fn run_left(&mut self)
	{
		match self.tag
		{
			AnimationTag::RunLeft =>
			{}
			_ =>
			{
				self.facing = Facing::Left;
				self.tag = AnimationTag::RunLeft;
				self.frame = 0;
			}
		}
	}

	pub fn run_right(&mut self)
	{
		match self.tag
		{
			AnimationTag::RunRight =>
			{}
			_ =>
			{
				self.facing = Facing::Right;
				self.tag = AnimationTag::RunRight;
				self.frame = 0;
			}
		}
	}

	pub fn run_up(&mut self)
	{
		match self.tag
		{
			AnimationTag::RunUp =>
			{}
			_ =>
			{
				self.tag = AnimationTag::RunUp;
				self.frame = 0;
			}
		}
	}

	pub fn run_down(&mut self)
	{
		match self.tag
		{
			AnimationTag::RunDown =>
			{}
			_ =>
			{
				self.tag = AnimationTag::RunDown;
				self.frame = 0;
			}
		}
	}

	pub fn scan(&mut self)
	{
		match self.tag
		{
			AnimationTag::Scanning =>
			{}
			_ =>
			{
				self.tag = AnimationTag::Scanning;
				self.frame = 0;
			}
		}
	}

	pub fn become_grabbed(&mut self)
	{
		self.tag = AnimationTag::Grabbed;
		self.frame = 0;
		self.ticks = 0;
	}

	pub fn collapse(&mut self)
	{
		self.tag = AnimationTag::Collapsed;
		self.frame = 0;
		self.ticks = 0;
	}

	pub fn tick(&mut self)
	{
		self.ticks += 1;

		if self.ticks >= FRAME_LENGTH_IN_TICKS
		{
			self.ticks = 0;
			self.next_frame();
		}

		match self.tag
		{
			AnimationTag::Hanging =>
			{
				self.hang_height += 1;
				if self.hang_height > 160
				{
					self.tag = AnimationTag::Gone;
				}
			}
			_ => (),
		}
	}

	fn next_frame(&mut self)
	{
		self.frame += 1;
		match self.tag
		{
			AnimationTag::Grabbed =>
			{
				if self.frame >= 3
				{
					self.tag = AnimationTag::Hanging;
					self.frame = 0;
				}
			}
			AnimationTag::Hanging =>
			{
				if self.frame >= 3
				{
					self.frame = 0;
				}
			}
			AnimationTag::Collapsed =>
			{
				if self.frame >= 11
				{
					self.tag = AnimationTag::Gone;
				}
			}
			AnimationTag::IdleRight | AnimationTag::IdleLeft =>
			{
				self.frame = 0;
			}
			_ =>
			{
				let animation_len = 2;
				if self.frame >= animation_len
				{
					self.frame = 0;
				}
			}
		}
	}

	pub fn draw(&self, x: i32, y: i32)
	{
		let start = match self.tag
		{
			AnimationTag::IdleRight => 0,
			AnimationTag::IdleLeft => 1,
			AnimationTag::RunRight => 2,
			AnimationTag::RunLeft => 4,
			AnimationTag::RunDown => 6,
			AnimationTag::RunUp => 8,
			AnimationTag::Grabbed => 10,
			AnimationTag::Hanging => 13,
			AnimationTag::Collapsed => 16,
			AnimationTag::Scanning => 27,
			AnimationTag::Gone => return,
		};
		let offset: usize = start + (self.frame as usize);
		let frame = &ASTRONAUT_FRAMES[offset];

		unsafe { *DRAW_COLORS = 0x1320 };
		blit(
			frame,
			x - (ASTRONAUT_WIDTH as i32) / 2,
			y - (ASTRONAUT_HEIGHT as i32) + 2 - (self.hang_height as i32),
			ASTRONAUT_WIDTH,
			ASTRONAUT_HEIGHT,
			BLIT_2BPP,
		);

		match self.tag
		{
			AnimationTag::Grabbed | AnimationTag::Hanging =>
			{
				let y_of_grab = y - 3;
				if (self.hang_height as i32) < y_of_grab
				{
					let len = (y_of_grab - (self.hang_height as i32)) as u32;
					unsafe { *DRAW_COLORS = 2 };
					vline(x - 1, 0, len);
				}
			}
			_ => (),
		}
	}

	pub fn is_visible(&self) -> bool
	{
		match self.tag
		{
			AnimationTag::Gone => false,
			_ => true,
		}
	}
}

const ASTRONAUT_WIDTH: u32 = 12;
const ASTRONAUT_HEIGHT: u32 = 12;
const ASTRONAUT_FRAMES: [[u8; 36]; 29] = [
	ASTRONAUT1,
	ASTRONAUT2,
	ASTRONAUT3,
	ASTRONAUT4,
	ASTRONAUT5,
	ASTRONAUT6,
	ASTRONAUT7,
	ASTRONAUT8,
	ASTRONAUT9,
	ASTRONAUT10,
	ASTRONAUT11,
	ASTRONAUT12,
	ASTRONAUT13,
	ASTRONAUT14,
	ASTRONAUT15,
	ASTRONAUT16,
	ASTRONAUT17,
	ASTRONAUT18,
	ASTRONAUT19,
	ASTRONAUT20,
	ASTRONAUT21,
	ASTRONAUT22,
	ASTRONAUT23,
	ASTRONAUT24,
	ASTRONAUT25,
	ASTRONAUT26,
	ASTRONAUT27,
	ASTRONAUT28,
	ASTRONAUT29,
];

// astronaut10
const ASTRONAUT10: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x55, 0x00, 0x02, 0x55, 0x00,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x00, 0x55, 0x00,
	0x00, 0x41, 0x00, 0x00, 0x7f, 0x00, 0x03, 0x7f, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut11
const ASTRONAUT11: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x69, 0x00, 0x00, 0x69, 0x00,
	0x01, 0x55, 0x40, 0x14, 0x55, 0x14, 0x00, 0x55, 0x00, 0x00, 0x55, 0x00,
	0x00, 0x41, 0x18, 0x01, 0xf7, 0x00, 0x03, 0xff, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut12
const ASTRONAUT12: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x11, 0x50, 0x00, 0x06, 0x90,
	0x04, 0x56, 0x90, 0x01, 0x55, 0x40, 0x00, 0x55, 0x10, 0x05, 0x50, 0x10,
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x18, 0x00, 0xff, 0x00, 0x00, 0x3c, 0x00,
];

// astronaut13
const ASTRONAUT13: [u8; 36] = [
	0x00, 0x14, 0x00, 0x10, 0x01, 0x00, 0x05, 0x55, 0x50, 0x00, 0x55, 0xa4,
	0x10, 0x55, 0xa4, 0x05, 0x55, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x14, 0x00, 0x00, 0x00,
];

// astronaut14
const ASTRONAUT14: [u8; 36] = [
	0x00, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x15, 0x55, 0x50,
	0x00, 0x55, 0xa4, 0x00, 0x55, 0xa4, 0x15, 0x55, 0x50, 0x00, 0x01, 0x00,
	0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

// astronaut15
const ASTRONAUT15: [u8; 36] = [
	0x00, 0x00, 0x10, 0x10, 0x00, 0x40, 0x04, 0x01, 0x00, 0x01, 0x55, 0x50,
	0x10, 0x55, 0xa4, 0x04, 0x55, 0xa4, 0x01, 0x55, 0x50, 0x00, 0x01, 0x00,
	0x00, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

// astronaut16
const ASTRONAUT16: [u8; 36] = [
	0x00, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x01, 0x55, 0x50,
	0x04, 0x55, 0xa4, 0x10, 0x55, 0xa4, 0x01, 0x55, 0x50, 0x04, 0x01, 0x00,
	0x10, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

// astronaut17
const ASTRONAUT17: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x69, 0x00, 0x00, 0x69, 0x00,
	0x01, 0x55, 0x40, 0x04, 0x55, 0x10, 0x04, 0x55, 0x10, 0x00, 0x55, 0x00,
	0x00, 0x41, 0x18, 0x00, 0x7d, 0x00, 0x03, 0x7d, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut18
const ASTRONAUT18: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x69, 0x00,
	0x00, 0x69, 0x10, 0x01, 0x55, 0x40, 0x04, 0x55, 0x00, 0x04, 0x55, 0x00,
	0x00, 0x55, 0x00, 0x00, 0x7d, 0x18, 0x03, 0x7d, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut19
const ASTRONAUT19: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00,
	0x00, 0x69, 0x10, 0x00, 0x69, 0x10, 0x01, 0x55, 0x40, 0x04, 0x55, 0x00,
	0x04, 0x55, 0x00, 0x00, 0x55, 0x00, 0x03, 0x7d, 0xd4, 0x00, 0xff, 0x00,
];

// astronaut1
const ASTRONAUT1: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x69, 0x00, 0x00, 0x69, 0x00,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x01, 0x55, 0x58, 0x00, 0x55, 0x00,
	0x00, 0x41, 0x00, 0x00, 0x7d, 0x00, 0x03, 0x7d, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut20
const ASTRONAUT20: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00,
	0x00, 0x55, 0x10, 0x00, 0x69, 0x10, 0x01, 0x55, 0x40, 0x04, 0x55, 0x00,
	0x04, 0x55, 0x00, 0x00, 0x55, 0x00, 0x03, 0x7d, 0xd4, 0x00, 0xff, 0x00,
];

// astronaut21
const ASTRONAUT21: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x14, 0x00, 0x00, 0x55, 0x00, 0x00, 0x69, 0x00, 0x01, 0x55, 0x40,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x03, 0x7d, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut22
const ASTRONAUT22: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x55, 0x00,
	0x01, 0xa5, 0x40, 0x01, 0x55, 0x40, 0x03, 0x55, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut23
const ASTRONAUT23: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x55, 0x00, 0x01, 0x55, 0x40, 0x01, 0xa5, 0x40, 0x00, 0xff, 0x00,
];

// astronaut24
const ASTRONAUT24: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x55, 0x00, 0x01, 0x55, 0x40, 0x01, 0xa5, 0x40, 0x00, 0xff, 0x00,
];

// astronaut25
const ASTRONAUT25: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x55, 0x00, 0x01, 0x55, 0x40, 0x01, 0xa5, 0x40, 0x00, 0xff, 0x00,
];

// astronaut26
const ASTRONAUT26: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x01, 0xa5, 0x40, 0x00, 0xff, 0x00,
];

// astronaut27
const ASTRONAUT27: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x3c, 0x00,
];

// astronaut2
const ASTRONAUT2: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x69, 0x00, 0x00, 0x69, 0x00,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x25, 0x55, 0x40, 0x00, 0x55, 0x00,
	0x00, 0x41, 0x00, 0x00, 0x7d, 0x00, 0x03, 0x7d, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut3
const ASTRONAUT3: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x69, 0x00, 0x00, 0x69, 0x00,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x01, 0x55, 0x58, 0x00, 0x55, 0x00,
	0x00, 0x41, 0x00, 0x00, 0x7f, 0x00, 0x03, 0x7f, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut4
const ASTRONAUT4: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x69, 0x00, 0x00, 0x69, 0x00,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x01, 0x55, 0x58, 0x00, 0x55, 0x00,
	0x00, 0x41, 0x00, 0x00, 0xfd, 0x00, 0x03, 0xfd, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut5
const ASTRONAUT5: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x69, 0x00, 0x00, 0x69, 0x00,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x25, 0x55, 0x40, 0x00, 0x55, 0x00,
	0x00, 0x41, 0x00, 0x00, 0xfd, 0x00, 0x03, 0xfd, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut6
const ASTRONAUT6: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x69, 0x00, 0x00, 0x69, 0x00,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x25, 0x55, 0x40, 0x00, 0x55, 0x00,
	0x00, 0x41, 0x00, 0x00, 0x7f, 0x00, 0x03, 0x7f, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut7
const ASTRONAUT7: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x69, 0x00, 0x00, 0x69, 0x00,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x00, 0x55, 0x80,
	0x00, 0x41, 0x00, 0x00, 0x7f, 0x00, 0x03, 0x7f, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut8
const ASTRONAUT8: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x69, 0x00, 0x00, 0x69, 0x00,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x00, 0x55, 0x80,
	0x00, 0x41, 0x00, 0x00, 0xfd, 0x00, 0x03, 0xfd, 0xc0, 0x00, 0xff, 0x00,
];

// astronaut9
const ASTRONAUT9: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x55, 0x00, 0x02, 0x55, 0x00,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x00, 0x55, 0x00,
	0x00, 0x41, 0x00, 0x00, 0xfd, 0x00, 0x03, 0xfd, 0xc0, 0x00, 0xff, 0x00,
];

const ASTRONAUT28: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x55, 0x00, 0x00, 0x69, 0x00,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x01, 0x65, 0x40, 0x00, 0x55, 0x00,
	0x00, 0x41, 0x00, 0x00, 0x7d, 0x00, 0x03, 0x7d, 0xc0, 0x00, 0xff, 0x00,
];
const ASTRONAUT29: [u8; 36] = [
	0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x55, 0x00, 0x00, 0x69, 0x00,
	0x01, 0x55, 0x40, 0x01, 0x55, 0x40, 0x01, 0x59, 0x40, 0x00, 0x55, 0x00,
	0x00, 0x41, 0x00, 0x00, 0x7d, 0x00, 0x03, 0x7d, 0xc0, 0x00, 0xff, 0x00,
];
